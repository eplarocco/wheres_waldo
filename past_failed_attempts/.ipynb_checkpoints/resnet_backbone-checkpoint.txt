import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision.models import resnet50

class SimpleRCNN(nn.Module):
    def __init__(self):
        super(SimpleRCNN, self).__init__()
        
        # Load pre-trained ResNet50
        resnet = resnet50(pretrained=True)
        
        # Use ResNet50 as the backbone, excluding its fully connected layers
        self.backbone = nn.Sequential(*list(resnet.children())[:-2])  # Extract up to the last conv layer
        
        # Region Proposal Network (RPN): Proposes bounding boxes
        self.rpn = nn.Sequential(
            nn.Conv2d(2048, 512, kernel_size=3, padding=1),  # Adjust input channels to match ResNet output
            nn.ReLU(),
            nn.Conv2d(512, 9 * 4, kernel_size=1),  # 9 anchors, each with 4 bbox coords
        )
        
        # Fully connected layers for bounding box refinement
        self.fc1 = nn.Linear(2048 * 7 * 7, 256)  # RoI pooled feature size
        self.fc2 = nn.Linear(256, 4)  # Outputs bounding box coords (x, y, w, h)
        
    def forward(self, x):
        # Step 1: Extract features using the backbone
        features = self.backbone(x)  # ResNet50 backbone output (Batch x 2048 x H/32 x W/32)
        
        # Step 2: Generate region proposals with RPN
        rpn_out = self.rpn(features)  # RPN outputs raw bounding box coordinates
        
        # For simplicity, let's assume we have a fixed number of RoIs from RPN
        # In practice, RoIs are obtained using Non-Maximum Suppression (NMS)
        # Here we simulate RoI pooling on a fixed region
        roi = features[:, :, :7, :7]  # Simulate RoI extraction (2048x7x7)
        
        # Step 3: Flatten the RoI features for fully connected layers
        roi_flattened = roi.reshape(roi.size(0), -1)  # Use reshape instead of view
        
        # Step 4: Predict bounding boxes
        x = F.relu(self.fc1(roi_flattened))
        bbox = self.fc2(x)
        
        return bbox


# Instantiate the model
model = SimpleRCNN()

# Test the model with a random input tensor of size (batch_size=1, channels=3, height=512, width=512)
input_tensor = torch.randn(1, 3, 512, 512)  # Example input
output = model(input_tensor)

print("Predicted Bounding Box:", output)
